<?php
/*
 *  Copyright 2022.  Baks.dev <admin@baks.dev>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

namespace BaksDev\Wildberries\Repository\ShopSettingsTokenByOrder;


use App\Module\Orders\Order\Entity as EntityOrder;
use App\Module\Orders\Order\Type\Id\OrderUid;
use App\Module\User\Profile\UserProfile\Type\Id\UserProfileUid;
use App\Module\Wildberries\Settings\Entity as EntitySettings;
use Doctrine\ORM\EntityManagerInterface;

final class ShopSettingsTokenByOrder implements ShopSettingsTokenByOrderInterface
{
    private EntityManagerInterface $entityManager;
    
    public function __construct(EntityManagerInterface $entityManager)
    {
        $this->entityManager = $entityManager;
    }
    
    /* Получаем токен авторизации по заказу */
    public function get(OrderUid $order) : ?UserProfileUid
    {
        $qb = $this->entityManager->createQueryBuilder();
        
        $select = sprintf('new %s(event.profile, shop_event.token)', UserProfileUid::class);
        $qb->select($select);
        
        /* Order */
        $qb->from(EntityOrder\Order::class, 'orders');
        $qb->join(EntityOrder\Event\Event::class, 'event', 'WITH', 'event.id = orders.event');
        
        /* Токен авторизации */
        $qb->join(EntitySettings\Settings::class, 'shop', 'WITH', 'shop.id = event.profile');
        $qb->join(
          EntitySettings\Event\Event::class,
          'shop_event',
          'WITH',
          'shop_event.id = shop.event AND shop_event.active = true');
        
        
        
        $qb->where('orders.id = :order');
        $qb->setParameter('order', $order, OrderUid::TYPE);
        
        return $qb->getQuery()->getOneOrNullResult();
    }
    
}